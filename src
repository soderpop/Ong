//Copyright Alexander Edward Brygider August 14th 2023 (All rights reserved worldwide)

// Ong programming language

// Ong is a programming language that is based on fractals. It is a self optimizing, Fractal based, programming language. It is currently in the process of being developed. Our goal is to to create the world's first self optimizing, Fractal based, programming language. Copywrite Alexander Edward Brygider August 14th 2023 (All rights reserved worldwide)

console.log("Welcome to the Ong programming language! We are currently in the process of developing this early access language. Please check back later for updates. The Ong programming language is an early stage programming language. It is currently in the process of being developed. Our goal is to to create the world's first self optimizing, Fractal based, programming language. Copywrite Alexander Edward Brygider August 14th 2023 (All rights reserved worldwide)");

function SierpinskiTrine(input, program, output) {
  this.input = input;
  this.program = program;
  this.output = output;

  this.draw = function (canvas, x, y, size) {
    const subTriangleSize = size / 2;

    if (size > 1) {
      canvas.drawTriangle(x, y, x + size, y, x + size / 2, y + size / 2);
      this.draw(canvas, x, y, subTriangleSize);
      this.draw(canvas, x + size, y, subTriangleSize);
      this.draw(canvas, x + size / 2, y + size / 2, subTriangleSize);
    } else {
      canvas.drawPoint(x, y);
    }
  };
}

const memoize = (function () {
  const cache = {};

  return function (fn) {
    return function (...args) {
      if (cache[args]) {
        return cache[args];
      } else {
        const result = fn(...args);
        cache[args] = result;
        return result;
      }
    };
  };
})();

const metagraph = function (nodes) {
  const graph = new Map();

  for (const node of nodes) {
    graph.set(node.name, node);
    for (const edge of node.edges) {
      graph.set(edge.name, edge);
    }
  }

  return graph;
};

const abstractInterpretation = function (program) {
  const analyzer = new Analyzer();

  analyzer.visit(program);

  return analyzer.getResults();
};

const partialEvaluation = function (program, assumptions) {
  const evaluator = new Evaluator();

  evaluator.visit(program, assumptions);

  return evaluator.getResults();
};

const programSpecialization = function (program, input) {
  const specializer = new Specializer();

  specializer.visit(program, input);

  return specializer.getResults();
};

const Analyzer = function () {
  this.results = {};

  this.visit = function (node) {
    if (node.name in this.results) {
      return this.results[node.name];
    } else {
      const results = {};
      for (const child of node.children) {
        results[child.name] = this.visit(child);
      }
      this.results[node.name] = results;
      return results;
    }
  };
};

const Evaluator = function () {
  this.results = {};

  this.visit = function (node, assumptions) {
    if (node.name in this.results) {
      return this.results[node.name];
    } else {
      const results = {};
      for (const child of node.children) {
        results[child.name] = this.visit(child, assumptions);
      }
      this.results[node.name] = assumptions[node.name] ? results[node.name] : node.value;
      return results;
    }
  };
};
const Specializer = function () {
  this.results = {};

  this.visit = function (node, input) {
    if (node.name in this.results) {
      return this.results[node.name];
    } else {
      const results = {};
      for (const child of node.children) {
        results[child.name] = this.visit(child, input);
      }
      this.results[node.name] = results[node.name].map(value => value + input);
      return results;
    }
  };
};

// Ong framework
const Ong = {
    newFractal: (name, apply) => new Fractal(name, apply),

    evalFractal: (fractal, args) => {
      if (fractal.apply === undefined) {
        return fractal;
      } else {
        return fractal.apply(fractal, args);
      }
    },

    list: (args) => {
        return new Fractal("list", (fractal) => {
            const result = [];
            for (const arg of args) {
                result.push(Ong.evalFractal(arg));
            }
            return result;
        });
    },

    newTrine: (input, program, output) => {
        return new Trine(input, program, output);
    },

    lispParse: (string) => {
        const tokens = string.split(" ");
        const fractal = Ong.newFractal(tokens[0], undefined);

        for (let i = 1; i < tokens.length; i++) {
            fractal.args.push(Ong.lispParse(tokens[i]));
        }

        return fractal;
    },

    optimize: (program) => {
        if (program.apply === undefined) {
            return program;
        } else {
            const optimizedBody = memoize(program.body);

            return Ong.newTrine(
                "self",
                function (fractal) {
                    return program.apply(fractal, optimizedBody);
                },
                "optimized"
            );
        }
    },

    createNetwork: (program) => {
        if (program.apply === undefined) {
            return program;
        } else {
            const network = memoize(program.body);

            return Ong.newTrine(
                "self",
                function (fractal) {
                    const results = [];
                    for (const fractalArg of network.args) {
                        results.push(program.apply(fractal, fractalArg));
                    }
                    return results;
                },
                "network"
            );
        }
    },

    newProgram: (fractal) => {
        return Ong.newTrine(
            "self",
            function (fractal) {
                const program = Ong.lispParse(fractal.output);
                return Ong.newFractal(program);
            },
            "program"
        );
    },                                                                                                                        
    selfOptimize: function (fractal) {
        const program = Ong.lispParse(fractal.output);
        const optimizedProgram = memoize(program);
        return Ong.newTrine(
            "self",
            function (fractal) {
                return Ong.newFractal(optimizedProgram);
            },
            "optimized"
        );
    },

    SierpinskiTrine: function (input, program, output) {
        this.input = input;
        this.program = program;
        this.output = output;

        this.draw = function (canvas, x, y, size) {
            const subTriangleSize = size / 2;

            if (size > 1) {
                canvas.drawTriangle(x, y, x + size, y, x + size / 2, y + size / 2);
                this.draw(canvas, x, y, subTriangleSize);
                this.draw(canvas, x + size, y, subTriangleSize);
                this.draw(canvas, x + size / 2, y + size / 2, subTriangleSize);
              } else {
                  canvas.drawPoint(x, y);
              }
          };
      }
};

// Ong fractal
const Fractal = function (name, apply) {
    this.name = name;
    this.apply = apply;
    this.args = [];
}

// Ong trine
const Trine = function (input, program, output) {
    this.input = input;
    this.program = program;
    this.output = output;
}

// Ong n dimensional canvas:
const NDimensionalCanvas = function (dimension) {
    this.dimension = dimension;
    this.points = [];

    this.drawPoint = function (...args) {
        this.points.push(args);
    };

    this.drawTriangle = function (...args) {
        this.points.push(args);
    };
}

// Ong 2 dimensional canvas:
const TwoDimensionalCanvas = function () {
    NDimensionalCanvas.call(this, 2);
}

// Ong 3 dimensional canvas:
const ThreeDimensionalCanvas = function () {
    NDimensionalCanvas.call(this, 3);
}

// Ong 4 dimensional canvas:
const FourDimensionalCanvas = function () {
    NDimensionalCanvas.call(this, 4);
}

// allow user to use the Ong programming language in the browser:
const OngBrowser = function () {
    this.canvas = new NDimensionalCanvas();
    this.fractals = [];
    this.trines = [];

    this.addFractal = function (fractal) {
        this.fractals.push(fractal);
    };

    this.addTrine = function (trine) {
        this.trines.push(trine);
    };

    this.draw = function () {
        for (const trine of this.trines) {
            const fractal = this.fractals[trine.input];
            const program = this.fractals[trine.program];
            const output = this.fractals[trine.output];

            const programResult = program.apply(fractal);
            const outputResult = output.apply(programResult);

            outputResult.draw(this.canvas);
        }
    };
}

// Ong 2 dimensional browser:
const TwoDimensionalBrowser = function () {
    OngBrowser.call(this);

    this.canvas = new TwoDimensionalCanvas();

    this.draw = function () {
        for (const trine of this.trines) {
            const fractal = this.fractals[trine.input];
            const program = this.fractals[trine.program];
            const output = this.fractals[trine.output];

            const programResult = program.apply(fractal);
            const outputResult = output.apply(programResult);

            outputResult.draw(this.canvas);
        }
    };
}

// Ong 3 dimensional browser:
const ThreeDimensionalBrowser = function () {
    OngBrowser.call(this);

    this.canvas = new ThreeDimensionalCanvas();

    this.draw = function () {
        for (const trine of this.trines) {
            const fractal = this.fractals[trine.input];
            const program = this.fractals[trine.program];
            const output = this.fractals[trine.output];

            const programResult = program.apply(fractal);
            const outputResult = output.apply(programResult);

            outputResult.draw(this.canvas);
        }
    };

}

// Ong 4 dimensional browser:
const FourDimensionalBrowser = function () {
    
    OngBrowser.call(this);

    this.canvas = new FourDimensionalCanvas();

    this.draw = function () {
        for (const trine of this.trines) {
            const fractal = this.fractals[trine.input];
            const program = this.fractals[trine.program];
            const output = this.fractals[trine.output];

            const programResult = program.apply(fractal);
            const outputResult = output.apply(programResult);

            outputResult.draw(this.canvas);
        }
    }

//create syntax for Ong programming language so that it uses lisp syntax:

// Ong lisp syntax:
const OngLispSyntax = function () {
    this.parse = function (string) {
        const tokens = string.split(" ");
        const fractal = Ong.newFractal(tokens[0], undefined);

        for (let i = 1; i < tokens.length; i++) {
            fractal.args.push(Ong.lispParse(tokens[i]));
        }

        return fractal;
    };
}

//ask user to input a program in the Ong programming language:
}




    // Ong syntax explanation:
    const OngSyntaxExplanation = function () {
        console.log("for ease of use the Ong Programming language is designed to have its syntax be similar to that of the Lisp programming language. The Ong programming language is a self optimizing, Fractal based, programming language. What this means is that the Ong programming language is a programming language that is based on fractals. Why is this important? Because Fractals allow for the Ong programming language to easily optimize itself. This means that the Ong programming language is a self optimizing, Fractal based, programming language. Copywrite Alexander Edward Brygider August 14th 2023 (All rights reserved worldwide)");
    }

//main function:
const main = function () {
    const canvas = new TwoDimensionalCanvas();
    const sierpinskiTrine = new SierpinskiTrine("self", "self", "self");
    sierpinskiTrine.draw(canvas, 0, 0, 512);
};


//run main function:
main();
